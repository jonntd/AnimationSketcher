
global proc BindSelected3dCharacter()
{
	// currently simply bind a geometry
	string $selected[] = `ls -sl`;
    if(size($selected) > 0)
    {
		
		textField -e -text $selected[0] tf_3dc;
    }
}

global proc BindSelectTrajectory()
{
	// bind a NURB curve (projected?)
	string $selected[] = `ls -sl`;
    if(size($selected) > 0)
    {
		
        textField -e -text $selected[0] tf_trajectory;
    }
}

global proc BindSelectedJoint()
{
	string $selected[] = `ls -sl`;
    if(size($selected) > 0)
    {
		
        textField -e -text $selected[0] tf_rootJoint;
    }
}

global proc BindSelectedJointEnd()
{
	string $selected[] = `ls -sl`;
    if(size($selected) > 0)
    {
        textField -e -text $selected[0] tf_endJoint;
    }
}

//----- Bind LOA ----------

// return: curveIntersect Node
global proc string GetIntersectNode(string $c1, string $c2)
{
	//TODO: use direction, active view direction
	string $node = `curveIntersect -ch on $c1 $c2`;
	return $node;
}



//use `pointOnCurve` to get position


// LOA List

global proc AddSelectedLOA()
{
	string $selected[] = `ls -sl`;
    if(size($selected) > 0)
    {
		textScrollList -e -append $selected[0] -sc "OnSelectLOAListItem" list_loa;
    }
}

global proc RemoveSelectedLOA()
{
	string $selected[] = `ls -sl`;
    if(size($selected) > 0)
    {
		textScrollList -e -removeItem $selected[0] list_loa;
    }
}

global proc CleanLOAList()
{
	textScrollList -e -ra list_loa;
}


global proc OnSelectLOAListItem()
{
	//string $stextScrollList
	select -r `textScrollList -q -selectItem list_loa`;
}

//----------------------------



// deform to currently selected LOA

global proc DeformToLOA_Pure()
{
	string $root = `textField -query -text tf_rootJoint`;
	string $end = `textField -query -text tf_endJoint`;

	string $childrenJoints[] = `listRelatives -ad $root`;
	string $end = $childrenJoints[0];

	CurveIKCmd -root $root -end $end;
}

global proc DeformToLOA()
{
	select -r `textScrollList -q -selectItem list_loa`;

	DeformToLOA_Pure();
}




//-----------------------------


// return ik handle name
global proc string ApplyAnimation_FlowMotionPath()
{
	string $character = `textField -query -text tf_3dc`;
	string $curveName = `textField -query -text tf_trajectory`;
    string $rootJointName = `textField -query -text tf_rootJoint`;
    
    string $childrenJoints[] = `listRelatives -ad $rootJointName`;
    string $leafJointName = $childrenJoints[0];
    select -r $rootJointName $leafJointName;
    string $ikHandlesNames[] = `ikHandle -sol ikSplineSolver -ns 30`;
    string $ikHandleName = $ikHandlesNames[0];
    string $ikSplineName = $ikHandlesNames[2];

    xform -cp $ikSplineName; //Center spline curve pivot

    select -r $ikHandleName;
    setAttr ($ikHandleName+".dTwistControlEnable") 1;

    //pathAnimation -startTimeU `playbackOptions -query -minTime` -endTimeU `playbackOptions -query -maxTime` -c $curveName $character;
    select -r $ikSplineName $curveName;
    
	//pathAnimation -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;
	pathAnimation -fractionMode true -follow true -followAxis x -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;

    //flow -divisions 2 2 30 -objectCentered 1 -localCompute 0 -localDivisions 2 2 2 $ikSplineName;
	flow -divisions 30 2 2 -objectCentered 1 -localCompute 0 -localDivisions 2 2 2 $ikSplineName;

	return $ikHandleName;
}

global proc ApplyAnimationCpp()
{
    string $character = `textField -query -text tf_3dc`;
	string $curveName = `textField -query -text tf_trajectory`;
    string $rootJointName = `textField -query -text tf_rootJoint`;

    string $childrenJoints[] = `listRelatives -ad $rootJointName`;
    string $leafJointName = $childrenJoints[0];
    select -r $rootJointName $leafJointName;
    createNode ikSolverNode;
    ikHandle -sol ikSolverNode -sj $rootJointName -ee $leafJointName;
}


global proc ApplyMotionPathNode()
{
    string $character = `textField -query -text tf_3dc`;
	string $curveName = `textField -query -text tf_trajectory`;
    
    // Create an anim curve to define how the motion progresses along
    // the path. Here we assume the animation is 114 frames long and
    // progresses linearly in time. (Add UI to allow modifications the anim curve?)
    string $ac = `createNode animCurveTU -n "animCurve"`;
    setKeyframe -t 1 -v 0 $ac;
    setKeyframe -t 114 -v 1 $ac;

    // Create a motionPathNode and connect the path and anim curve.
    //string $mp = `createNode motionPathNode`;
	string $mp = `createNode motionPath`;
    setAttr ($mp+".fractionMode") true;
    connectAttr ($ac+".output") ($mp+".uValue");
    connectAttr ($curveName+".worldSpace[0]") ($mp+".geometryPath");

    connectAttr ($mp+".allCoordinates") ($character+".translate");
    connectAttr ($mp+".rotate") ($character+".rotate");
    
    // Add rotation so the character follows the path:
    // 1) Turn on the "follow" attribute to enable rotation.
    setAttr ($mp+".follow") 1;
}


/*
// return intersecting point
global proc LOAIntersect(string $trajectory, string $loa)
{
	string $intersect_node = GetIntersectNode(string $c1, string $c2);

	//get param => get time

}
*/

/*
global proc limitJointRotation(string $joints[])
{
	for ($j in $joints)
	{
		joint -e -lsx true -lx -1 1 -lsz true -lz -1 1 ($j);

		setKeyframe ($j);
	}
}


global proc unlimitJointRotation(string $joints[])
{
	for ($j in $joints)
	{
		joint -e -lx -360 360 -lz -360 360 ($j);

		setKeyframe ($j);
	}
}
*/




// Final version of apply animation
// 1. create motion path follow
// 2. for loa : loa list
//		find intersect point, param
//		deform to loa
//		insert keyframe (set ik fk control and blend weight)
//		


global proc ApplyAnimation()
{
	//get all joints
	string $rootJointName = `textField -query -text tf_rootJoint`;
	string $childrenJoints[] = `listRelatives -ad $rootJointName`;
	
	$childrenJoints[size($childrenJoints)] = $rootJointName;		//add root to the list

	/*
	for($j in $childrenJoints)
	{
		setAttr ($j+".jointOrientX", 0);
		setAttr ($j+".jointOrientY", 0);
		setAttr ($j+".jointOrientZ", 0);
	}
	*/

	//print $childrenJoints[0];
	//print $childrenJoints[size($childrenJoints)-1];
	
	

	//limitJointRotation($childrenJoints);

	// trajectory flow path
	string $ikhandle = ApplyAnimation_FlowMotionPath();
	setAttr ($ikhandle + ".ikFkManipulation", 1);

	// iterate list
	string $loa_array[] = `textScrollList -q -allItems list_loa`;
	string $trajectory = `textField -query -text tf_trajectory`;
	float $spans = `getAttr ($trajectory + ".spans")`;

	

	
	
	//TODO: set total_frames
	int $blend_frames = `floatSliderGrp -q -v sld_blend`;
	int $total_frames = `floatSliderGrp -q -v sld_total`;



	//int $center_frame_array[];

	


	for ($loa in $loa_array)
	{
		string $intersect_node = GetIntersectNode($trajectory, $loa);
		float $u[] = `getAttr ($intersect_node + ".p1")`;

		float $p = $u[0] / $spans;		// 0 - 1

		//print $u;

		int $center_frame = $p * $total_frames;
		//$center_frame_array[size($center_frame_array)] = $center_frame;
		int $blend_in_frame = $center_frame - $blend_frames;
		if($blend_in_frame <= 0) 
		{
			$blend_in_frame = 1;
		}
		int $blend_out_frame = $center_frame + $blend_frames;

		//insert key frames for joints transform
		currentTime $blend_in_frame ;
		setAttr ($ikhandle + ".ikBlend", 1);
		setKeyframe { ($ikhandle + ".ikb") };

		//unlimitJointRotation($childrenJoints);
		

		for($j in $childrenJoints)
		{
			//setKeyframe ($j + ".rx");
			//setKeyframe ($j + ".ry");
			//setKeyframe ($j + ".rz");

			//setKeyframe ($j + ".tx");
			//setKeyframe ($j + ".tz");

			setKeyframe {($j)};
		}

		
		currentTime $center_frame ;
		setAttr ($ikhandle + ".ikBlend", 0);
		setKeyframe { ($ikhandle + ".ikb") };



		currentTime $blend_out_frame ;
		setAttr ($ikhandle + ".ikBlend", 1);
		setKeyframe { ($ikhandle + ".ikb") };

		//unlimitJointRotation($childrenJoints);

		for($j in $childrenJoints)
		{
			//setKeyframe ($j + ".rx");
			//setKeyframe ($j + ".ry");
			//setKeyframe ($j + ".rz");

			//setKeyframe ($j + ".tx");
			//setKeyframe ($j + ".tz");

			setKeyframe {($j)};
		}


		//insert key frames for ikhandle weights

		currentTime ($blend_in_frame + 1) ;
		setAttr ($ikhandle + ".ikBlend", 0);
		setKeyframe { ($ikhandle + ".ikb") };

		//limitJointRotation($childrenJoints);
		
		currentTime ($blend_out_frame - 1) ;
		setAttr ($ikhandle + ".ikBlend", 0);
		setKeyframe { ($ikhandle + ".ikb") };
		
		//limitJointRotation($childrenJoints);
		

		// fk deform to loa

		currentTime $center_frame;
		select -r $loa;
		DeformToLOA_Pure();

		// set keyframe for each joints
		for($j in $childrenJoints)
		{
			//setKeyframe ($j + ".rx");
			//setKeyframe ($j + ".ry");
			//setKeyframe ($j + ".rz");

			//setKeyframe ($j + ".tx");
			//setKeyframe ($j + ".tz");

			setKeyframe {($j)};
		}
	}




	/*

	// fk deform to loa
	int $i = 0;

	for ($loa in $loa_array)
	{
		currentTime $center_frame_array[$i];
		select -r $loa;
		DeformToLOA_Pure();

		// set keyframe for each joints
		for($j in $childrenJoints)
		{
			//setKeyframe ($j + ".rx");
			//setKeyframe ($j + ".ry");
			//setKeyframe ($j + ".rz");
			setKeyframe {($j)};
		}

		$i = $i + 1;
	}

	*/



	

}







// ----------- Main menu ---------------------

global proc AnimationSketcherMainMenu()
{
	if (`window -exists animationSketcherWindow`) deleteUI animationSketcherWindow;

	window -title "Animation Sketcher" -widthHeight 600 480 animationSketcherWindow;

	columnLayout -adj 1;

	rowLayout 
		-numberOfColumns 3 
		-columnWidth3 150 300 150 
		-columnAlign3 "right" "center" "center";

	text -l "3D Character" t_3dc;
	textField -ed false -w 300 tf_3dc;
	button -l "Bind Selected Character" -command "BindSelected3dCharacter" btn_3dc;

	setParent ..;

	rowLayout 
		-numberOfColumns 3 
		-columnWidth3 150 300 150 
		-columnAlign3 "right" "center" "center";

	text -l "Trajectory Curve" t_trajectory;
	textField -ed false -w 300 tf_trajectory;
	button -l "Bind Selected Curve" -command "BindSelectTrajectory" btn_trajectory;

	setParent ..;

	rowLayout 
		-numberOfColumns 3 
		-columnWidth3 150 300 150 
		-columnAlign3 "right" "center" "center";

	text -l "Shape Root Joint" t_rootJoint;
	textField -ed false -w 300 tf_rootJoint;
	button -l "Bind Selected Joint" -command "BindSelectedJoint" btn_rootJoint;

	setParent ..;

	rowLayout 
		-numberOfColumns 3 
		-columnWidth3 150 300 150 
		-columnAlign3 "right" "center" "center";

	text -l "Shape End effector Joint" t_endJoint;
	textField -ed false -w 300 tf_endJoint;
	button -l "Bind Selected Joint" -command "BindSelectedJointEnd" btn_endJoint;

	setParent ..;

	rowLayout;
	floatSliderGrp -label "loa blend frame" -field true -value 10 -min 1 -max 10 -fieldMinValue 1 -fieldMaxValue 100 sld_blend;
	setParent ..;

	rowLayout;
	floatSliderGrp -label "total animation frames" -field true -value 120 -min 1 -max 120 -fieldMinValue 1 -fieldMaxValue 500 sld_total;
	setParent ..;


	//----- LOA menu list
	rowLayout;
	text -l "Line of Actions List";
	setParent ..;


	rowLayout
		-numberOfColumns 2;

	textScrollList list_loa;

	columnLayout;
	button -l "Add LOA" -command "AddSelectedLOA" btn_add_loa;
	button -l "Remove LOA" -command "RemoveSelectedLOA" btn_remove_loa;
	button -l "Clean" -command "CleanLOAList" btn_clean_loa;

	button -l "Deform LOA" -command "DeformToLOA" btn_deform_loa;

	setParent ..;
	setParent ..;


	rowLayout 
		-numberOfColumns 6;

	button -l "Apply" -command "ApplyAnimation" btn_apply;
	//button -l "Apply" -command "ApplyAnimation_FlowMotionPath" btn_apply;
	
	button -l "Apply2" -command "ApplyMotionPathNode" btn_apply2;

	button -l "IKNodeTest" -command "ApplyAnimationCpp" btn_ik_node_test;
	
	button -l "Cancel" btn_cancel;

	setParent ..;


	//the animation curve editor
	tearOffPanel "Graph Editor" "graphEditor" true;

	showWindow animationSketcherWindow;
}


global string $nameMenu;

global proc createMenu()
{
    global string $nameMenu;
    $nameMenu=`menu -label "AnimationSketcher" -parent "MayaWindow"`;

	menuItem -label "AnimationSketcher Menu" -command "AnimationSketcherMainMenu()";
}

global proc deleteMenu()
{
    global string $nameMenu;
    deleteUI -m $nameMenu;
}



