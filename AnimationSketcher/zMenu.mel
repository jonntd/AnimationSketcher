
global proc BindSelected3dCharacter()
{
	// currently simply bind a geometry
	string $selected[] = `ls -sl`;
    if(size($selected) > 0)
    {
		
		textField -e -text $selected[0] tf_3dc;
    }
}

global proc BindSelectTrajectory()
{
	// bind a NURB curve (projected?)
	string $selected[] = `ls -sl`;
    if(size($selected) > 0)
    {
		
        textField -e -text $selected[0] tf_trajectory;
    }
}

global proc BindSelectedJoint()
{
	string $selected[] = `ls -sl`;
    if(size($selected) > 0)
    {
		
        textField -e -text $selected[0] tf_rootJoint;
    }
}

global proc ApplyAnimation()
{
	string $character = `textField -query -text tf_3dc`;
	string $curveName = `textField -query -text tf_trajectory`;
    string $rootJointName = `textField -query -text tf_rootJoint`;
    
    string $childrenJoints[] = `listRelatives -ad $rootJointName`;
    string $leafJointName = $childrenJoints[0];
    select -r $rootJointName $leafJointName;
    string $ikHandlesNames[] = `ikHandle -sol ikSplineSolver -ns 30`;
    string $ikHandleName = $ikHandlesNames[0];
    string $ikSplineName = $ikHandlesNames[2];

    xform -cp $ikSplineName; //Center spline curve pivot

    select -r $ikHandleName;
    setAttr ($ikHandleName+".dTwistControlEnable") 1;

    //pathAnimation -startTimeU `playbackOptions -query -minTime` -endTimeU `playbackOptions -query -maxTime` -c $curveName $character;
    select -r $ikSplineName $curveName;
    pathAnimation -fractionMode true -follow true -followAxis z -upAxis y -worldUpType "vector" -worldUpVector 0 1 0 -inverseUp false -inverseFront false -bank false -startTimeU `playbackOptions -query -minTime` -endTimeU  `playbackOptions -query -maxTime`;

    flow -divisions 2 2 30 -objectCentered 1 -localCompute 0 -localDivisions 2 2 2 $ikSplineName;
}


global proc AnimationSketcherMainMenu()
{
	if (`window -exists animationSketcherWindow`) deleteUI animationSketcherWindow;

	window -title "Animation Sketcher" -widthHeight 600 480 animationSketcherWindow;

	columnLayout -adj 1;

	rowLayout 
		-numberOfColumns 3 
		-columnWidth3 150 300 150 
		-columnAlign3 "right" "center" "center";

	text -l "3D Character Transform" t_3dc;
	textField -ed false -w 300 tf_3dc;
	button -l "Bind Selected Character" -command "BindSelected3dCharacter" btn_3dc;

	setParent ..;

	rowLayout 
		-numberOfColumns 3 
		-columnWidth3 150 300 150 
		-columnAlign3 "right" "center" "center";

	text -l "Trajectory Curve" t_trajectory;
	textField -ed false -w 300 tf_trajectory;
	button -l "Bind Selected Curve" -command "BindSelectTrajectory" btn_trajectory;

	setParent ..;

	rowLayout 
		-numberOfColumns 3 
		-columnWidth3 150 300 150 
		-columnAlign3 "right" "center" "center";

	//TODO: this should be a table, a list of curves
	text -l "Shape Root Joint" t_rootJoint;
	textField -ed false -w 300 tf_rootJoint;
	button -l "Bind Selected Joint" -command "BindSelectedJoint" btn_rootJoint;

	setParent ..;


	rowLayout 
		-numberOfColumns 6;

	button -l "Apply" -command "ApplyAnimation" btn_apply;
	button -l "Cancel" btn_cancel;

	setParent ..;

	//the animation curve editor
	tearOffPanel "Graph Editor" "graphEditor" true;






	showWindow animationSketcherWindow;
}

/*
global proc RandomNodeDefault()
{
    string $cube[] = `polyCube`;
    string $inst1 = `instancer`;
    string $randnode = `createNode randomNode`;
    connectAttr ($cube[0]+".matrix", $inst1+".inputHierarchy[0]");
    connectAttr ($randnode+".outPoints", $inst1+".inputPoints");
}

global proc RandomNodeSelected()
{
    string $selected[] = `ls -sl`;
    if(size($selected) > 0)
    {
        string $inst1 = `instancer`;
        string $randnode = `createNode randomNode`;
        connectAttr ($selected[0]+".matrix", $inst1+".inputHierarchy[0]");
        connectAttr ($randnode+".outPoints", $inst1+".inputPoints");
    }
    else
    {
        print "Random Node: Nothing selected!";
    }
}

global proc LSystemNodeDefault()
{
    string $cube[] = `polyCube`;
    string $sphere[] = `polySphere`;
    string $inst1 = `instancer`;
    string $inst2 = `instancer`;
    string $lsnode = `createNode LSystemInstanceNode`;
    connectAttr ($cube[0]+".matrix",$inst1+".inputHierarchy[0]");
    connectAttr ($sphere[0]+".matrix", $inst2+".inputHierarchy[0]");
    connectAttr ($lsnode+".outBranches", $inst1+".inputPoints");
    connectAttr ($lsnode+".outFlowers", $inst2+".inputPoints");
}

global proc LSystemNodeSelected()
{
    string $selected[] = `ls -sl`;
    if(size($selected) >= 2)
    {
        string $inst1 = `instancer`;
        string $inst2 = `instancer`;
        string $lsnode = `createNode LSystemInstanceNode`;
        connectAttr ($selected[0]+".matrix",$inst1+".inputHierarchy[0]");
        connectAttr ($selected[1]+".matrix", $inst2+".inputHierarchy[0]");
        connectAttr ($lsnode+".outBranches", $inst1+".inputPoints");
        connectAttr ($lsnode+".outFlowers", $inst2+".inputPoints");
    }
    else
    {
        print "LSystem Node: Not enough geometries selected!";
    }
}
*/

global string $nameMenu;

global proc createMenu()
{
    global string $nameMenu;
    $nameMenu=`menu -label "AnimationSketcher" -parent "MayaWindow"`;

	menuItem -label "AnimationSketcher Menu" -command "AnimationSketcherMainMenu()";
}

global proc deleteMenu()
{
    global string $nameMenu;
    deleteUI -m $nameMenu;
}



